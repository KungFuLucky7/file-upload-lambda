AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  APIHandlerArn:
    Value:
      Fn::GetAtt:
      - APIHandler
      - Arn
  APIHandlerName:
    Value:
      Ref: APIHandler
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/
  FileBucketName:
    Description: The file bucket name
    Value:
      Ref: FileBucket
  FileTableName:
    Description: The file DynamoDB table name
    Value:
      Ref: FileTable
  RestAPIId:
    Value:
      Ref: RestAPI
Resources:
  APIHandler:
    Properties:
      CodeUri: s3://file-upload-deployment-bucket/a651700df7b807df29357d17d7f8ecfd
      Environment:
        Variables:
          AUTH0_DOMAIN: kungfulucky7.us.auth0.com
          DEBUG: 'true'
          DYNAMODB_TABLE_GSI: file-upload-dynamodb-table-gsi
          DYNAMODB_TABLE_NAME: file-upload-dynamodb-table
          ENV: dev
          S3_FILE_BUCKET_NAME: file-upload-media-bucket
          SECRET_NAME: file-upload-secrets
      Handler: app.app
      Layers:
      - Ref: ManagedLayer
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
      Runtime: python3.8
      Tags:
        aws-chalice: version=1.22.2:stage=dev:app=file-upload-lambda
      Timeout: 300
      Tracing: Active
    Type: AWS::Serverless::Function
  APIHandlerInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: APIHandler
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Type: AWS::Lambda::Permission
  DefaultRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:*:logs:*:*:*
          - Action: xray:*
            Effect: Allow
            Resource: '*'
          - Action:
            - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: arn:aws:secretsmanager:us-east-1:485673885023:secret:file-upload-secrets-mFmThl
          - Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Effect: Allow
            Resource:
            - arn:aws:dynamodb:us-east-1:485673885023:table/file-upload-dynamodb-table
            - arn:aws:dynamodb:us-east-1:485673885023:table/file-upload-dynamodb-table/index/file-upload-dynamodb-table-gsi
          - Action:
            - s3:ListBucket
            - s3:PutObject
            - s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::file-upload-media-bucket
          Version: '2012-10-17'
        PolicyName: DefaultRolePolicy
    Type: AWS::IAM::Role
  FileBucket:
    Properties:
      BucketName: file-upload-media-bucket
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
          MaxAge: 3000
    Type: AWS::S3::Bucket
  FileBucketPolicy:
    Properties:
      Bucket:
        Ref: FileBucket
      PolicyDocument:
        Id: FileBucketPolicy
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: FileBucket
              - /*
          Sid: PublicReadForGetBucketObjects
        Version: '2012-10-17'
    Type: AWS::S3::BucketPolicy
  FileTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: file_uuid
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: file-upload-dynamodb-table-gsi
        KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      KeySchema:
      - AttributeName: file_uuid
        KeyType: HASH
      - AttributeName: user_id
        KeyType: RANGE
      TableName: file-upload-dynamodb-table
    Type: AWS::DynamoDB::Table
  JwtTokenAuth:
    Properties:
      CodeUri: s3://file-upload-deployment-bucket/a651700df7b807df29357d17d7f8ecfd
      Environment:
        Variables:
          AUTH0_DOMAIN: kungfulucky7.us.auth0.com
          DEBUG: 'true'
          DYNAMODB_TABLE_GSI: file-upload-dynamodb-table-gsi
          DYNAMODB_TABLE_NAME: file-upload-dynamodb-table
          ENV: dev
          S3_FILE_BUCKET_NAME: file-upload-media-bucket
          SECRET_NAME: file-upload-secrets
      Handler: app.jwt_token_auth
      Layers:
      - Ref: ManagedLayer
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
      Runtime: python3.8
      Tags:
        aws-chalice: version=1.22.2:stage=dev:app=file-upload-lambda
      Timeout: 300
      Tracing: Active
    Type: AWS::Serverless::Function
  JwtTokenAuthInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - JwtTokenAuth
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Type: AWS::Lambda::Permission
  ManagedLayer:
    Properties:
      CompatibleRuntimes:
      - python3.8
      ContentUri: s3://file-upload-deployment-bucket/42b524812f7b427aa76bc10bfa3008de
      LayerName: file-upload-lambda-dev-managed-layer
    Type: AWS::Serverless::LayerVersion
  RestAPI:
    Properties:
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: file-upload
          version: '1.0'
        paths:
          /:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /files/metadata:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /files/metadata/{file_uuid}:
            delete:
              consumes:
              - application/json
              parameters:
              - in: path
                name: file_uuid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            get:
              consumes:
              - application/json
              parameters:
              - in: path
                name: file_uuid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,PUT,DELETE,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            put:
              consumes:
              - application/json
              parameters:
              - in: path
                name: file_uuid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /files/{file_uuid}:
            get:
              consumes:
              - application/json
              parameters:
              - in: path
                name: file_uuid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              parameters:
              - in: path
                name: file_uuid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_token_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /ping:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          jwt_token_auth:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              authorizerUri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwtTokenAuth.Arn}/invocations
              type: token
            x-amazon-apigateway-authtype: custom
        swagger: '2.0'
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
      EndpointConfiguration: EDGE
      StageName: api
    Type: AWS::Serverless::Api
Transform: AWS::Serverless-2016-10-31
